

    eclipse {
        classpath {
            containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
            file {
                whenMerged {
                    entries.findAll { ( it.properties.kind.equals('src') || it.properties.kind.equals('lib') ) && !it.properties.path.contains("junit") }.each {
                        it.entryAttributes['module'] = 'true'
                    }
                    entries.findAll { it.properties.path.startsWith('org.eclipse.jdt.launching.JRE_CONTAINER') }.each {
                        it.entryAttributes['module'] = 'true'
                    }
                    entries.find { it.path == 'src/main/java' }.output = 'build/classes/java/main'

                    def testSrc = entries.find { it.path == 'src/test/java' }
                    testSrc.output = 'build/classes/java/test'
                    testSrc.entryAttributes['test'] = 'true'
                    testSrc.entryAttributes['optional'] = 'true'
                    testSrc.entryAttributes['ignore_optional_problems'] = 'true'

                    entries.forEach { entry ->
					    def entryIn = { it.find { file(entry.path).equals(it) } }
					    if (entry.kind == 'lib') {
						    entry.entryAttributes['test'] =
							    entryIn(configurations.testRuntimeClasspath) &&
							    !entryIn(configurations.runtimeClasspath)
					    }
                    }
                }
            }
        }
    }